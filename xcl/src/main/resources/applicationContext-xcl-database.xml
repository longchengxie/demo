<?xml version="1.0" encoding="UTF-8"?> 
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-3.0.xsd 
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!--主 数据源 -->
	<bean id="defaultDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		  destroy-method="close">
		<!-- 数据库驱动 -->
		<property name="driverClassName" value="${mysql.jdbc.driverClassName}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${mysql.jdbc.url}" />
		<property name="username" value="${mysql.jdbc.username}" />
		<property name="password" value="${mysql.jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${mysql.jdbc.initSize}" />
		<property name="minIdle" value="${mysql.jdbc.maxIdle}" />
		<property name="maxActive" value="${mysql.jdbc.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${mysql.jdbc.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="20000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="30000" />
		<!-- mysql中使用 -->
		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 超过时间限制是否回收 -->
		<property name="removeAbandoned" value="true" />
		<property name="connectionProperties" value = "clientEncoding=UTF-8;serverEncoding=GBK;"/>
		<!-- PSCache对支持游标的数据库性能提升巨大 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="mergeStat" />
	</bean>

	<!-- 从 数据源 -->
	<bean id="readOnlyDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		  destroy-method="close">
		<!-- 数据库驱动 -->
		<property name="driverClassName" value="${mysql.jdbc.readonly.driverClassName}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${mysql.jdbc.readonly.url}" />
		<property name="username" value="${mysql.jdbc.readonly.username}" />
		<property name="password" value="${mysql.jdbc.readonly.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${mysql.jdbc.readonly.initSize}" />
		<property name="minIdle" value="${mysql.jdbc.readonly.maxIdle}" />
		<property name="maxActive" value="${mysql.jdbc.readonly.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${mysql.jdbc.readonly.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="20000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="30000" />
		<!-- oracle中使用 -->
		<property name="validationQuery" value="SELECT 1" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 超过时间限制是否回收 -->
		<property name="removeAbandoned" value="true" />
		<property name="connectionProperties" value = "clientEncoding=UTF-8;serverEncoding=GBK;"/>
		<!-- PSCache对支持游标的数据库性能提升巨大-->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="mergeStat" />
	</bean>
	
	
	<!-- 从 数据源2 -->
	<bean id="readOnlyDataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		  destroy-method="close">
		<!-- 数据库驱动 -->
		<property name="driverClassName" value="${mysql.jdbc.readonly.driverClassName}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${mysql.jdbc.readonly.url}" />
		<property name="username" value="${mysql.jdbc.readonly.username}" />
		<property name="password" value="${mysql.jdbc.readonly.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${mysql.jdbc.readonly.initSize}" />
		<property name="minIdle" value="${mysql.jdbc.readonly.maxIdle}" />
		<property name="maxActive" value="${mysql.jdbc.readonly.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${mysql.jdbc.readonly.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="20000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="30000" />
		<!-- oracle中使用 -->
		<property name="validationQuery" value="SELECT 1" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 超过时间限制是否回收 -->
		<property name="removeAbandoned" value="true" />
		<property name="connectionProperties" value = "clientEncoding=UTF-8;serverEncoding=GBK;"/>
		<!-- PSCache对支持游标的数据库性能提升巨大-->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="mergeStat" />
	</bean>

	<bean id="dataSource" class="com.lvmama.xcl.hold.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="defaultDataSource" key="defaultDataSource" />
				<entry value-ref="readOnlyDataSource" key="readOnlyDataSource" />
				<entry value-ref="readOnlyDataSource2" key="readOnlyDataSource2" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="defaultDataSource" />
	</bean>

 	<!-- Transaction manager for a single JDBC DataSource -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:sqlmap-config.xml" />
		<property name="mapperLocations">
			<value>classpath*:mapper/**/*.xml</value>
		</property>
		<!-- 
		<property name="plugins">
			<list>
				<value>com.lvmama.vst.comm.mybatis.PaginationInterceptor</value>
			</list>
		</property>
		 -->
	</bean>
    
    <bean id="sqlSession"  class="org.mybatis.spring.SqlSessionTemplate">  
          <constructor-arg index="0" ref="sqlSessionFactory" />  
    </bean> 
      
	<!-- 连接事务的注解配置 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<bean id="dataSourceAdapter" class="com.lvmama.xcl.hold.adapter.PollingDataSourceAdapter"></bean>
	
 	<bean id="txInterceptor" class="com.lvmama.xcl.hold.LvmamaSoaTransactionInterceptor">
 		<!--主从复制时间 -->
		<property name="dbSyncSecond" value="${DB_SYNC_SECOND}" />
		<!-- 强制从主库中取数据 -->
		<property name="checkWriteInReadonly" value="${checkWriteInReadonly}" />
		<property name="dataSourceHoldEnabled" value="${datasource.hold.enabled}" />
		<property name="dataSourceAdapter">
			<ref bean="dataSourceAdapter"/>
		</property>
		
		<property name="transactionManager">
			<ref bean="transactionManager"/>
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="insert*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="create*">PROPAGATION_REQUIRED,-Exception</prop> 
				<prop key="*">PROPAGATION_REQUIRED,readOnly</prop>
				
			</props>
		</property>
	</bean>
	 
	<bean id="autoProxyCreator" class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />
	
	<bean id="aspectJExpressionPointcutAdvisor" class="org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor"> 
		<property name="advice"> 
			<ref bean="txInterceptor" /> 
		</property> 
		<property name="expression"> 
			<value><![CDATA[(@annotation(com.lvmama.xcl.annotation.ReadOnlyDataSource))||(execution(* com.lvmama..*.*ServiceImpl.*(..)) && @within(org.springframework.stereotype.Service) && 
			(execution(* create*(..)) || execution(* check*(..)) || execution(* delete*(..)) || execution(* update*(..)) || execution(* save*(..))))]]></value> 
		</property> 
	</bean>
	
	
	
</beans>